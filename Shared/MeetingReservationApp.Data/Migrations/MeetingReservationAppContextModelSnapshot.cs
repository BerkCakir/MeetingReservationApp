// <auto-generated />
using System;
using MeetingReservationApp.Data.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeetingReservationApp.Data.Migrations
{
    [DbContext(typeof(MeetingReservationAppContext))]
    partial class MeetingReservationAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryPurpose")
                        .HasColumnType("int");

                    b.Property<bool>("IsFixed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5684),
                            InventoryPurpose = 2,
                            IsFixed = true,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5696),
                            Name = "Beamer",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5705),
                            InventoryPurpose = 1,
                            IsFixed = true,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5706),
                            Name = "WhiteBoard",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5710),
                            InventoryPurpose = 2,
                            IsFixed = false,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5711),
                            Name = "Television",
                            RoomId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5714),
                            InventoryPurpose = 1,
                            IsFixed = true,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5716),
                            Name = "WhiteBoard",
                            RoomId = 3
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5719),
                            InventoryPurpose = 3,
                            IsFixed = true,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5720),
                            Name = "Video Conference Equipment",
                            RoomId = 4
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5724),
                            InventoryPurpose = 2,
                            IsFixed = false,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5725),
                            Name = "Television",
                            RoomId = 5
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5728),
                            InventoryPurpose = 3,
                            IsFixed = true,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5730),
                            Name = "Television",
                            RoomId = 5
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5733),
                            InventoryPurpose = 2,
                            IsFixed = true,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 80, DateTimeKind.Local).AddTicks(5734),
                            Name = "Beamer",
                            RoomId = 6
                        });
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.InventoryReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InventoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomReservationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomReservationGuid");

                    b.ToTable("InventoryReservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 88, DateTimeKind.Local).AddTicks(4217),
                            InventoryId = 2,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 88, DateTimeKind.Local).AddTicks(4230),
                            RoomReservationGuid = new Guid("019ee26d-5111-4d96-abfa-5bd6c966d529")
                        });
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OfficeEndHours")
                        .HasColumnType("int");

                    b.Property<int>("OfficeEndMinutes")
                        .HasColumnType("int");

                    b.Property<int>("OfficeStartHours")
                        .HasColumnType("int");

                    b.Property<int>("OfficeStartMinutes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 73, DateTimeKind.Local).AddTicks(1168),
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 73, DateTimeKind.Local).AddTicks(1460),
                            Name = "Amsterdam",
                            OfficeEndHours = 17,
                            OfficeEndMinutes = 0,
                            OfficeStartHours = 8,
                            OfficeStartMinutes = 30
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 73, DateTimeKind.Local).AddTicks(1741),
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 73, DateTimeKind.Local).AddTicks(1743),
                            Name = "Berlin",
                            OfficeEndHours = 20,
                            OfficeEndMinutes = 0,
                            OfficeStartHours = 8,
                            OfficeStartMinutes = 30
                        });
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChairCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChairCount = 10,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1011),
                            LocationId = 1,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1025),
                            Name = "Meeting Room 1"
                        },
                        new
                        {
                            Id = 2,
                            ChairCount = 0,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1033),
                            LocationId = 1,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1034),
                            Name = "Meeting Room 2"
                        },
                        new
                        {
                            Id = 3,
                            ChairCount = 5,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1038),
                            LocationId = 1,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1039),
                            Name = "Meeting Room 3"
                        },
                        new
                        {
                            Id = 4,
                            ChairCount = 20,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1043),
                            LocationId = 2,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1044),
                            Name = "Meeting Room A"
                        },
                        new
                        {
                            Id = 5,
                            ChairCount = 5,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1048),
                            LocationId = 2,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1049),
                            Name = "Meeting Room B"
                        },
                        new
                        {
                            Id = 6,
                            ChairCount = 0,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1052),
                            LocationId = 2,
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 78, DateTimeKind.Local).AddTicks(1053),
                            Name = "Meeting Room C"
                        });
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.RoomReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendantCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("MeetingEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MeetingStartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomReservationGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoomReservations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttendantCount = 7,
                            CreatedDate = new DateTime(2021, 10, 6, 23, 27, 0, 82, DateTimeKind.Local).AddTicks(2973),
                            Description = "Marketing Unit Meeting",
                            MeetingEndTime = new DateTime(2021, 10, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            MeetingStartTime = new DateTime(2021, 10, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedDate = new DateTime(2021, 10, 6, 23, 27, 0, 82, DateTimeKind.Local).AddTicks(2988),
                            RoomId = 2,
                            RoomReservationGuid = new Guid("019ee26d-5111-4d96-abfa-5bd6c966d529")
                        });
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.Inventory", b =>
                {
                    b.HasOne("MeetingReservationApp.Entities.Concrete.Room", "Room")
                        .WithMany("Inventories")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.InventoryReservation", b =>
                {
                    b.HasOne("MeetingReservationApp.Entities.Concrete.RoomReservation", "RoomReservation")
                        .WithMany("InventoryReservation")
                        .HasForeignKey("RoomReservationGuid")
                        .HasPrincipalKey("RoomReservationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomReservation");
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.Room", b =>
                {
                    b.HasOne("MeetingReservationApp.Entities.Concrete.Location", "Location")
                        .WithMany("Rooms")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.Location", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.Room", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("MeetingReservationApp.Entities.Concrete.RoomReservation", b =>
                {
                    b.Navigation("InventoryReservation");
                });
#pragma warning restore 612, 618
        }
    }
}
